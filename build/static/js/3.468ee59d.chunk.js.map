{"version":3,"sources":["components/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["module","exports","checkoutSummary","props","className","styled","CheckoutSummary","Burger","ingridients","Button","btnType","clicked","cancled","continued","ContactData","state","contact","name","elementType","config","displayName","placeHolder","validation","required","valid","value","touched","email","street","postalCode","minNums","maxNums","deliveryMethod","values","wholeFormValidity","checkValidity","isValid","trim","length","changeFormHandler","e","id","updatedForm","updatedFormElement","target","formValidity","el","setState","submitOrderHandler","order","price","totalPrice","userId","postOrderData","token","resetWholeState","history","push","preventDefault","arrState","this","output","onSubmit","map","Input","key","elementtype","invalid","changed","disabled","loading","Spinner","Component","withDisplayError","connect","burgerBuilder","inOrder","auth","dispatch","actions","orderData","axios","Checkout","orderCancledHandler","goBack","orderContinuedHandler","pathname","path","match","component","once"],"mappings":"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","file":"static/js/3.468ee59d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2mwwu\",\"Burger\":\"CheckoutSummary_Burger__2CmyU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\",\"Input\":\"ContactData_Input__2fK5-\"};","import React from 'react';\n\nimport Burger from '../Burger/Burger';\nimport Button from '../UI/Button/Button';\nimport styled from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={styled.CheckoutSummary}>\n            <h1>We hope it tasets well!!!</h1>\n            <div className={styled.Burger}>\n                <Burger ingridients={props.ingridients}/>\n            </div>\n            <Button btnType=\"Danger\" clicked={props.cancled}>CANCEL</Button>\n            <Button btnType=\"Success\" clicked={props.continued}>CONTINUE</Button>\n        </div>\n    )\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport styled from './ContactData.module.css';\nimport axios from '../../../axios-post';\nimport Input from '../../../components/UI/Input/Input';\nimport * as actions from '../../../store/actions/index';\nimport withDisplayError from '../../../hoc/withDisplayError/withDisplayError';\n\n\nclass ContactData extends Component {\n\n    state = {\n        contact: {\n            name: {\n                elementType: 'input',\n                config: {\n                    name: 'name',\n                    displayName: 'Name',\n                    placeHolder: 'Your name'\n                },\n                validation: {\n                    required: true\n                },\n                valid: false,\n                value: '',\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                config: {\n                    name: 'email',\n                    displayName: 'Email',\n                    placeHolder: 'Your email'\n                },\n                validation: {\n                    required: true\n                },\n                valid: false,\n                value: '',\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                config: {\n                    name: 'street',\n                    displayName: 'Street',\n                    placeHolder: 'Street'\n                },\n                validation: {\n                    required: true\n                },\n                valid: false,\n                value: '',\n                touched: false\n            },\n            postalCode: {\n                elementType: 'input',\n                config: {\n                    name: 'postalCode',\n                    displayName: 'Postal Code',\n                    placeHolder: 'Your postal code'\n                },\n                validation: {\n                    required: true,\n                    minNums: 5,\n                    maxNums: 5\n                },\n                valid: false,\n                value: '',\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                config: {\n                    name: 'deliveryMethod',\n                    displayName: 'Delivery Method',\n                    values: [\n                        { value: 'fastest', displayName: 'Fastest' },\n                        { value: 'cheapest', displayName: 'Cheapest' }\n                    ]\n                },\n                validation: {},\n                valid: true,\n                value: 'fastest'\n            },\n        },\n        wholeFormValidity: false\n    }\n\n    checkValidity = (value, validation) => {\n        let isValid = true;\n\n        if (!validation.required) {\n            return true;\n        }\n        if (validation.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (validation.minNums && validation.maxNums) {\n            isValid = value.length >= validation.minNums\n                && value.length <= validation.maxNums && isValid\n        }\n\n        return isValid;\n    }\n\n    changeFormHandler = (e, id) => {\n        const updatedForm = {\n            ...this.state.contact\n        }\n\n        const updatedFormElement = {\n            ...this.state.contact[id]\n        }\n        updatedFormElement.touched = true;\n        updatedFormElement.value = e.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedForm[id] = updatedFormElement;\n        let formValidity = true;\n        for (let el in updatedForm) {\n            formValidity = updatedForm[el].valid && formValidity;\n        }\n\n        this.setState({\n            contact: updatedForm,\n            wholeFormValidity: formValidity\n        });\n    }\n\n\n    submitOrderHandler = (e) => {\n        const order = {\n            contact: {\n                name: this.state.contact.name.value,\n                email: this.state.contact.email.value,\n                street: this.state.contact.street.value,\n                postalCode: this.state.contact.postalCode.value,\n                deliveryMethod: this.state.contact.deliveryMethod.value\n            },\n            ingridients: this.props.ingridients,\n            price: this.props.totalPrice,\n            userId: this.props.userId\n        };\n\n        this.props.postOrderData(order, this.props.token);\n        this.props.resetWholeState();\n        this.props.history.push('/burger-builder');\n\n        e.preventDefault();\n    }\n\n    render() {\n        let arrState = [];\n\n        for (let el in this.state.contact) {\n            arrState.push({\n                id: el,\n                config: this.state.contact[el]\n            });\n        }\n        let output = (\n            <div className={styled.ContactData}>\n                <h4>\n                    Enter your contact data\n                </h4>\n                <form onSubmit={this.submitOrderHandler}>\n\n                    {\n                        arrState.map(el => (\n                            <Input\n                                key={el.id}\n                                elementtype={el.config.elementType}\n                                config={el.config.config}\n                                value={el.config.value}\n                                invalid={!el.config.valid}\n                                touched={el.config.touched}\n                                changed={(e) => this.changeFormHandler(e, el.id)}\n                            />\n                        ))\n                    }\n                    <Button btnType=\"Success\" disabled={!(this.state.wholeFormValidity && this.props.token)}>ORDER</Button>\n                </form>\n            </div>\n        )\n        if (this.props.loading) {\n            output = <Spinner />\n        }\n        return output;\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingridients: state.burgerBuilder.inOrder,\n        totalPrice: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        resetWholeState: () => dispatch(actions.resetWholeState()),\n        postOrderData: (orderData, token) => dispatch(actions.postOrderData(orderData, token))\n    }\n}\n\nexport default withDisplayError(connect(mapStateToProps, mapDispatchToProps)(ContactData), axios);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios from '../../axios-post';\n\nimport withDisplayError from '../../hoc/withDisplayError/withDisplayError';\nimport CheckoutSummary from '../../components/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n\n    orderCancledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    orderContinuedHandler = (e) => {\n        e.preventDefault();\n        this.props.history.push({\n            pathname: '/checkout/contact-data',\n        });\n    }\n\n    render() {\n\n        let checkoutSummary = null;\n\n        if (this.props.ingridients) {\n            checkoutSummary = <CheckoutSummary\n                ingridients={this.props.ingridients}\n                cancled={this.orderCancledHandler}\n                continued={this.orderContinuedHandler} />;\n        }\n        return (\n            <div>\n                {checkoutSummary}\n                <Route path={this.props.match.path + '/contact-data'}\n                    component={ContactData} />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ingridients: state.burgerBuilder.inOrder,\n        once: state.burgerBuilder.once\n    }\n}\n\nexport default withDisplayError(connect(mapStateToProps)(Checkout), axios);"],"sourceRoot":""}